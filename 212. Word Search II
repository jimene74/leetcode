class Solution {
    List<String> res;
    public List<String> findWords(char[][] board, String[] words) {
        res = new ArrayList<>();
        TrieNode root = new TrieNode();
        for(String w : words){
            TrieNode curr = root;
            for(char c : w.toCharArray()){
                if(curr.children[c-'a']==null){
                    curr.children[c-'a'] = new TrieNode();
                }
                curr = curr.children[c-'a'];
            }
            curr.word = w;
            //System.out.println(curr.word);
        }
        
        for(int i =0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                dfs(board, i, j, root);
            }
        }        
        return res;
    }
    
    public void dfs(char[][] board, int i, int j, TrieNode n){
        if(i<0 || j<0 || i>=board.length || j>=board[0].length){
            return;
        }
        char c = board[i][j];
        //System.out.println(c);
        if(c=='#' || n.children[c-'a']==null){
            return;
        }
        TrieNode p = n.children[c-'a'];
        //System.out.println(c);
        if(p.word!=null){
            res.add(p.word);
            p.word = null;
        }
        
        board[i][j] = '#';
        dfs(board, i-1, j, p);
        dfs(board, i+1, j, p);
        dfs(board, i, j-1, p);
        dfs(board, i, j+1, p);
        board[i][j] = c;
        
    }
    
    class TrieNode{
        String word;
        TrieNode[] children = new TrieNode[26];
    }
}
