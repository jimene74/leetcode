/*

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode l3 = new ListNode(0);
        recurse(l1, l2, l3, 0);
        return l3.next;
    }
    
    public void recurse(ListNode l1, ListNode l2, ListNode l3, int carry){
        int extra = 0;
        if(l1==null&&l2==null){
            if(carry!=0){
                l3.next= new ListNode(carry);
            }
            return;
        }else if(l1==null){
            if(l2.val+carry>9){
                extra = (l2.val+carry)/10;
                int remainder = (l2.val+carry)%10;
                l3.next = new ListNode(remainder);
            }else{
                l3.next = new ListNode(l2.val+carry);
            }
            recurse(l1, l2.next, l3.next, extra);
            return;
        }else if(l2==null){
            if(l1.val+carry>9){
                extra = (l1.val+carry)/10;
                int remainder = (l1.val+carry)%10;
                l3.next = new ListNode(remainder);
            }else{
                l3.next = new ListNode(l1.val+carry);
            }
            recurse(l1.next, l2, l3.next, extra);
            return;
        }else{
            if(l1.val+l2.val+carry>9){
                extra = (l1.val+l2.val+carry)/10;
                int remainder = (l1.val+l2.val+carry)%10;
                l3.next = new ListNode(remainder);
            }else{
                l3.next = new ListNode(l1.val+l2.val+carry);
            }
        }
        recurse(l1.next, l2.next, l3.next, extra);
        
    }
}
