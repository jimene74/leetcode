/*

In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].
A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.

*/

class Solution {
    
    public int minKnightMoves(int x, int y) {
        int[][] offsets = new int[][]{{2, 1}, {-2, 1}, {1, 2}, {-1, 2}, {-2, -1}, {2, -1}, {-1, -2}, {1, -2}};
        x = Math.abs(x);
        y = Math.abs(y);
        Deque<int[]> q = new LinkedList<>();
        q.add(new int[]{0,0});
        int count = 0;
        HashSet<String> visited = new HashSet<>();
        visited.add("0,0");
        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i<size; i++){
                int[] current = q.poll();
                if(current[0]==x && current[1]==y){
                    return count;
                }
                for(int[] offset : offsets){
                    int newX = offset[0]+current[0];
                    int newY = offset[1]+current[1];
                    if(!visited.contains(newX+","+newY) && newX>=-1 && newY>=-1){
                        q.add(new int[] {newX, newY});
                        visited.add(newX+","+newY);
                    }
                }
            }
            count++;
        }
        return -1;
    }
}
