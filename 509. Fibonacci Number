/*

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,
F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).
Example 1:
Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.

*/


class Solution {
    public int fib(int n) {
        HashMap<Integer, Integer> memo = new HashMap<>();
        return recurse(n, memo);
    }
    private int recurse(int n, HashMap<Integer,Integer> memo){
        if(n==0){
            return 0;
        }
        if(n==1){
            return 1;
        }
        if(memo.containsKey(n)){
            return memo.get(n);
        }
        int total =  recurse(n-1,memo) + recurse(n-2,memo);
        memo.put(n, total);
        return total;
    }
}

/*

class Solution {
    public int fib(int n) {
        int ans = 0;
        if(n<=1)return n;
        int[][] fibMatrix = {{1, 1}, {1, 0}};
        pow(fibMatrix,n-1);
        return fibMatrix[0][0];
    }
    
    public void pow(int[][] matrix, int x){
        if(x<=1){
            return;
        }else if(x%2==0){
            x = x/2;
            pow(matrix, x);
            multiplyMatrix(matrix,matrix);
        }else{
            x = x/2;
            pow(matrix, x);
            int[][] fibMatrix = {{1, 1}, {1, 0}};
            multiplyMatrix(matrix,matrix);
            multiplyMatrix(matrix,fibMatrix);
        }
    }
    
    public void multiplyMatrix(int[][] a, int[][] b){
            int x = a[0][0]*b[0][0] + a[0][1]*b[1][0];
            int y = a[0][0]*b[0][1] + a[0][1]*b[1][1];
            int z = a[1][0]*b[0][0] + a[1][1]*b[1][0];
            int w = a[1][0]*b[0][1] + a[1][1]*b[1][1];
            
            a[0][0] = x;
            a[0][1] = y;
            a[1][0] = z;
            a[1][1] = w;
    }
}

*/

/*
class Solution {
    int[][] original;
    public int fib(int n) {
        int ans = 0;
        if(n<=1)return n;
        int[][] fibMatrix = {{1, 1}, {1, 0}};
        original = new int[][]{{1, 1}, {1, 0}};
        pow(fibMatrix,n-1);
        return fibMatrix[0][0];
    }
    
    public void pow(int[][] matrix, int x){
        if(x<=1){
            return;
        }else if(x%2==0){
            x = x/2;
            pow(matrix, x);
            multiplyMatrix(matrix,matrix);
        }else{
            x = x/2;
            pow(matrix, x);
            multiplyMatrix(matrix,matrix);
            multiplyMatrix(matrix,original);
        }
    }
    
    public void multiplyMatrix(int[][] a, int[][] b){
        //m*n X n*p = m*p
        if(a.length!=0 && b.length!=0 && a[0].length==b.length){
            int[][] response = new int[a.length][b[0].length];
            for(int i =0 ; i<a.length ; i++){
                for(int j = 0 ; j<b[0].length ; j++){
                    int total = 0;
                    for(int k = 0 ; k <a[0].length ; k++){
                        total = total + a[i][k]*b[k][j];
                    }
                    response[i][j] = total;
                }
            }
            for(int l = 0; l <response.length;l++){
                for(int p = 0 ; p<response[0].length;p++){
                    System.out.println(response[l][p]);
                    a[l][p] = response[l][p];
                }
            }
        }
    }
}
*/
