/*

Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

*/

class Solution {
    public double myPow(double x, int n) {
        long N = n;
        boolean divide = false;
        if(N<0){
            N = Math.abs(N);
            divide = true;
        }
        double ans = recurse(x,N);
        if(divide){
            ans = 1.0/ans;
        }
        return ans;
        
    }
    
    private double recurse(double x, long n){
        if(n==0){
            return 1.0;
        }if(n%2==0){
            long k = n/2;
            double xtok = recurse(x,k);
            return xtok*xtok;
        }else{
            long k = n/2;
            double xtok = recurse(x,k);
            return xtok*xtok*x;
        }
    }
}

/*

private double pow(double x, int n){
        double[] dp = new double[n+1];
        dp[0] = 1.0;
        for(int i = 1;i<=n;i++){
            if(i%2==0){
                dp[i] = dp[i/2] * dp[i/2];
            }else{
                dp[i] = dp[i/2] * dp[i/2] * x;
            }
        }
        return dp[n];
    }

*/

pow(n, x)

Recursive:

Runtime: 1 ms
Memory Usage: 38.3 MB

dp:

Runtime: 1 ms
Memory Usage: 38.5 MB

/*

private double recurse(double x, long n){
        double current = x;
        double ret = 1.0;
        for(long i = n;i>0;i=i/2){
            if(i%2==1){
                ret = ret*current;
            }
                current = current * current;
            
        }
        return ret;
    }
*/
