/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> response = new ArrayList<>();
        if(root==null){
            return response;
        }
        Deque<Node> q = new LinkedList<>();
        //List<Integer> first = new ArrayList<>();
        //first.add(root.val);
        //response.add(first);
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> level = new ArrayList<>();
            for(int i=0; i<size;i++){
                Node n = q.poll();
                for(Node c: n.children){
                    q.add(c);
                }
                level.add(n.val);
            }
            response.add(level);
        }
        return response;
    }
}
