class Solution {
    HashSet<String> visited;
    public int orangesRotting(int[][] grid) {
        int time = 0;
        int toVisit = 0;
        visited = new HashSet<>();
        Deque<int[]> dq = new LinkedList<>();
        for(int i = 0;i<grid.length;i++){
            for(int j =0; j<grid[0].length;j++){
                if(grid[i][j]!=0){
                    toVisit++;
                }
                if(grid[i][j]==2){
                    dq.add(new int[]{i+1,j});
                    dq.add(new int[]{i-1,j});
                    dq.add(new int[]{i,j+1});
                    dq.add(new int[]{i,j-1});
                    visited.add(i+","+j);
                }
            }
        }
        while(!dq.isEmpty()){
            time++;
            int size = dq.size();
            for(int i =0;i<size;i++){
                int[] cur = dq.poll();
                if(cur[0]>=0&&cur[0]<grid.length&&cur[1]>=0&&cur[1]<grid[0].length&&grid[cur[0]][cur[1]]!=0&&!visited.contains(cur[0]+","+cur[1])){
                    visited.add(cur[0]+","+cur[1]);
                    dq.add(new int[]{cur[0]+1, cur[1]});
                    dq.add(new int[]{cur[0]-1,cur[1]});
                    dq.add(new int[]{cur[0], cur[1]+1});
                    dq.add(new int[]{cur[0], cur[1]-1});
                }
            }
            
        }
        if(time!=0){
            time--;
        }
        if(toVisit!=visited.size()){
            return -1;
        }
        return time;
    }
}
