class Solution {
    public int minCostConnectPoints(int[][] points) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->a[0]-b[0]);
        Map<Integer, List<int[]>> map =new HashMap<>();
        for(int k =0;k<points.length;k++){
            map.put(k,new ArrayList<>());
        }
        HashSet<Integer> visited = new HashSet<>();
        for(int i =0; i<points.length;i++){
            for(int j =i+1 ;j<points.length;j++){
                map.get(i).add(new int[]{Math.abs(points[i][0]-points[j][0])+Math.abs(points[i][1]-points[j][1]),j});
                map.get(j).add(new int[]{Math.abs(points[j][0]-points[i][0])+Math.abs(points[j][1]-points[i][1]),i});
                //System.out.println(i+ ":" + j + "," + (Math.abs(points[i][0]-points[j][0])+Math.abs(points[i][1]-points[j][1])));
            }
        }
        
        pq.add(new int[]{0,0});
        int count = 0;
        while(visited.size()<points.length){
            
            int[] curr = pq.poll();
            if(visited.contains(curr[1])){
                continue;
            }
            //System.out.println(curr[1]);
            visited.add(curr[1]);
            //System.out.println(curr[0]);
            System.out.println(curr[1]);
            count = count + curr[0];
            for(int[] connections : map.get(curr[1])){
                if(!visited.contains(connections[1])){
                    pq.add(connections);
                }
                
            }
        }
        
        return count;
    }
}
